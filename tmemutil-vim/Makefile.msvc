# nmake -f Makefile.msvc

CC       = cl.exe
CPP		 = cl.exe
DFLAGS   =
CFLAGS   = $(DFLAGS) /nologo /W3 /WX- /wd4996 /wd4819 /O2 /Ob2 /Ot /GF /GS- /GR- /Gd /GL /MD /fp:fast /Zp16 /Gw /D "NDEBUG" /D "_UNICODE" /D "UNICODE" \
           /D "_CRT_SECURE_NO_WARNINGS"
LD       = link.exe /DLL /OPT:REF,ICF
MAKE	 = nmake
YASM     = msrt\yasm.exe

LIBPORTABLE_STATIC =

!if "$(PLATFORM)"=="X64" || "$(TARGET_CPU)"=="x64"
PLATFORM = X64
BITS	 = 64
XPV		 = 5.02
CFLAGS   = $(CFLAGS) /D "WIN64" /D "_WIN64" /favor:blend
DEPLIBS  = /LIBPATH:msrt msvcrt-light-x64.lib
ASMFLAGS = -fwin64 -O2 -DWINDOWS -Worphan-labels
!else
PLATFORM = X86
BITS	 = 32
XPV		 = 5.01
CFLAGS   = $(CFLAGS) /D "WIN32" /D "_WIN32" /arch:SSE2
DEPLIBS  = /LIBPATH:msrt msvcrt-light-x86.lib
ASMFLAGS = -fwin32 -O2 -DWINDOWS -D__i386__ -DWIN32 -DMSVC -Worphan-labels
!endif

CPPFLAGS = $(CFLAGS) /TP

MD       = @mkdir
CP	 	 = copy
RM	 	 = @del /q
RMDIR    = @rmdir /s /q
SRC      = src
SUB_DIR  = $(SRC)\mhook-lib
SUBMK    =\
	@cd $(SUB_DIR) && $(MAKE) -f Makefile.msvc

DEP      = .dep
RC       = rc.exe
RCFLAGS  = /D "_UNICODE" /D "UNICODE"

OBJDLL   = $(DEP)\portable.obj $(DEP)\inipara.obj $(DEP)\ice_error.obj  $(DEP)\safe_ex.obj \
           $(DEP)\inject.obj $(DEP)\bosskey.obj  $(DEP)\prefjs.obj $(DEP)\cachesize$(BITS).obj \
	   $(DEP)\instrset$(BITS).obj $(DEP)\unalignedisfaster$(BITS).obj $(DEP)\memset$(BITS).obj \
	   $(DEP)\cputype$(BITS).obj $(DEP)\inject$(BITS).obj

!if "$(LIBPORTABLE_STATIC)"=="1"
LD       = lib.exe
OUT	 	 = $(DISTDIR)\portable$(BITS)_s.lib
TETE	 = $(DISTDIR)\tmemutil_s.lib
CFLAGS   = $(CFLAGS) /D "LIBPORTABLE_STATIC"
LDFLAGS  = /LTCG /NOLOGO
DEPLIBS  =
OBJS     = $(DEP)\*.obj
!else
CFLAGS   = $(CFLAGS) /D "_DLL" /D "_USRDLL" /D "LIBPORTABLE_EXPORTS"
LDFLAGS  =  /NOLOGO /LTCG /opt:ref /opt:icf /MACHINE:$(PLATFORM) /NODEFAULTLIB /DEFAULTLIB:OLDNAMES /SECTION:.shrd,RWS /SUBSYSTEM:WINDOWS,$(XPV)
DEPLIBS  = $(OUT1) kernel32.lib shell32.lib shlwapi.lib user32.lib $(DEPLIBS)
OUT	 	 = $(DISTDIR)\portable$(BITS).dll
TETE	 = $(DISTDIR)\tmemutil.dll
OBJDLL   = $(OBJDLL)  $(DEP)\resource.res
OBJS     = $(OBJDLL)
!endif

DISTDIR	 = Release
OUT1	 = $(DISTDIR)\mhook$(BITS).lib

EXEC		= \
	@echo coming to src subdir...  && \
	@if not exist $(DISTDIR) $(MD) $(DISTDIR) 2>NUL 1>NUL && \
	@if not exist $(DEP) $(MD) $(DEP) 2>NUL 1>NUL \

all				: $(OUT1) $(OUT)
$(OUT1)			: $(SUB_DIR)/Makefile.msvc
	@if not exist $(YASM) (@echo Error: yasm not exist & exit 1)
	$(SUBMK)
$(OUT)			: $(OBJDLL)
	$(LD) /OUT:"$@" $(OBJS) $(LDFLAGS) $(DEPLIBS)
	-copy /y $(OUT) $(TETE) 2>&1>NUL
$(DEP)\portable.obj     : $(SRC)\portable.c $(SRC)\portable.h $(SRC)\header.h
	$(EXEC)
	$(CC) $(CFLAGS) /c $(SRC)\portable.c /Fo$@
$(DEP)\inipara.obj      : $(SRC)\inipara.c $(SRC)\inipara.h
	$(CC) $(CFLAGS) /c $(SRC)\inipara.c /Fo$@
$(DEP)\inject.obj       : $(SRC)\inject.c $(SRC)\inject.h $(SRC)\header.h
	$(CC) $(CFLAGS) /c $(SRC)\inject.c /Fo$@
$(DEP)\safe_ex.obj      : $(SRC)\safe_ex.c $(SRC)\safe_ex.h $(SRC)\header.h
	$(CC) $(CFLAGS) /c $(SRC)\safe_ex.c /Fo$@
$(DEP)\ice_error.obj    : $(SRC)\ice_error.c $(SRC)\ice_error.h
	$(CC) $(CFLAGS) /c $(SRC)\ice_error.c /Fo$@
$(DEP)\bosskey.obj      : $(SRC)\bosskey.c $(SRC)\bosskey.h
	$(CC) $(CFLAGS) /c $(SRC)\bosskey.c /Fo$@
$(DEP)\prefjs.obj      : $(SRC)\prefjs.c $(SRC)\prefjs.h
	$(CC) $(CFLAGS) /c $(SRC)\prefjs.c /Fo$@
$(DEP)\cachesize$(BITS).obj	    : $(SRC)\asm\cachesize$(BITS).asm
	$(YASM) -o $@ $(ASMFLAGS) $(SRC)\asm\cachesize$(BITS).asm
$(DEP)\instrset$(BITS).obj	    : $(SRC)\asm\instrset$(BITS).asm
	$(YASM) -o $@ $(ASMFLAGS) $(SRC)\asm\instrset$(BITS).asm
$(DEP)\memset$(BITS).obj	    : $(SRC)\asm\memset$(BITS).asm
	$(YASM) -o $@ $(ASMFLAGS) $(SRC)\asm\memset$(BITS).asm
$(DEP)\cputype$(BITS).obj	    : $(SRC)\asm\cputype$(BITS).asm
	$(YASM) -o $@ $(ASMFLAGS) $(SRC)\asm\cputype$(BITS).asm
$(DEP)\unalignedisfaster$(BITS).obj : $(SRC)\asm\unalignedisfaster$(BITS).asm
	$(YASM) -o $@ $(ASMFLAGS) $(SRC)\asm\unalignedisfaster$(BITS).asm
$(DEP)\inject$(BITS).obj	    : $(SRC)\asm\inject$(BITS).asm
	$(YASM) -o $@ $(ASMFLAGS) $(SRC)\asm\inject$(BITS).asm
$(DEP)\resource.res                 : $(SRC)\resource.rc
	$(RC) $(RCFLAGS)  /fo$@ $(SRC)\resource.rc

.PHONY		        : clean
clean                   : 
	-$(RMDIR) $(DISTDIR) $(DEP) 2>NUL 1>NUL

